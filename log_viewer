#!/usr/bin/env python3

import sys
import re
import curses
import mmap
import os
import time

if len(sys.argv) <= 1:
  print("Usage: log_viewer FILE [SESSION...]")
  os._exit(1)

logs = dict()
target_ids = sys.argv[2:]
total_bytes = os.stat(sys.argv[1]).st_size
keys = []
keypos = 0
linepos = 0
highlight = ""
only_highlight = False


def warning(win, msg):
  win.erase()
  win.addstr(0, 0, msg)
  win.addstr(2, 4, "Press any key to continue")
  win.refresh()
  win.getkey()


def set_keys(ids):
  global keypos, keys, linepos, logs
  keys = list(logs.keys())
  if len(ids) > 0:
    keys = list(set(keys) & set(ids))
  keys.sort(key=int)
  keypos = 0
  linepos = 0


def set_match(win, pattern):
  global keys, logs
  newkeys = []
  for k in keys:
    for ln in logs[k]:
      if pattern in logs[k][ln]:
        newkeys.append(k)
  if len(newkeys) > 0:
    set_keys(newkeys)
  else:
    warning(win, "No match")


def set_exclude(win, pattern):
  global keys, logs
  newkeys = []
  for k in keys:
    excluded = False
    for ln in logs[k]:
      if pattern in logs[k][ln]:
        excluded = True
    if not excluded:
      newkeys.append(k)
  if len(newkeys) > 0:
    set_keys(newkeys)
  else:
    warning(win, "No match")


def set_sessions(win, sessions):
  global keys, logs
  newkeys = []
  for k in keys:
    if k in sessions:
      newkeys.append(k)
  if len(newkeys) > 0:
    set_keys(newkeys)
  else:
    warning(win, "No sessions found")


def set_min_lines(win, lines):
  global keys, logs
  newkeys = []
  for k in keys:
    if len(logs[k]) >= lines:
      newkeys.append(k)
  if len(newkeys) > 0:
    set_keys(newkeys)
  else:
    warning(win, f"All session have less than {lines} messages.")


def read_string(win, title):
  rv = ""
  k = ""
  while k != "\n":
    win.erase()
    if k == "KEY_BACKSPACE":
      rv = rv[:-1]
    else:
      rv += k
    win.addstr(0, 0, title + rv)
    win.refresh()
    k = win.getkey()
  return rv


def main(win):
  curses.start_color()
  curses.use_default_colors()
  for i in range(0, curses.COLORS):
    curses.init_pair(i, i, -1)

  global keypos, keys, linepos, highlight, only_highlight
  y, x = win.getmaxyx()
  win.erase()
  linenum = 0
  update_size = int(total_bytes / 1000)
  next_update = update_size
  global_id="-1"
  current_id = global_id
  use_colors = True
  time_start = time.time()
  color = curses.COLOR_YELLOW
  prefix_re = re.compile("^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}   ")
  trace_re = re.compile("^[0-9]*[.][0-9]*: ")
  session_re = re.compile("[(]([0-9]+)[)]")
  MiB = 1048576

  with open(sys.argv[1], "rb") as f:
    line = f.readline().decode("utf8")
    while line:
      num_bytes = f.tell()
      if num_bytes > next_update:
        next_update = num_bytes + update_size
        bytes_per_sec = num_bytes / (time.time() - time_start)

        win.clrtoeol()
        win.addstr(0, 0, "Processing file '%s': %d MiB / %d MiB [%.01f MiB/s] (%.01f%%)" % (sys.argv[1], num_bytes / MiB, total_bytes / MiB, bytes_per_sec / MiB, int((num_bytes / total_bytes) * 1000.0) / 10.0))
        win.refresh()

      if prefix_re.match(line) or trace_re.match(line):
        ses_id = session_re.search(line, 0, 80)
        current_id = ses_id[1] if ses_id else global_id

      for chunk in range(0, len(line), x - 1):
        linenum += 1
        logs.setdefault(current_id, dict())[linenum] = line[chunk : chunk + x - 1]
      line = f.readline().decode("utf8")

  set_keys(target_ids)
  MAX_LINES = y - 3 # One for newline, two for the status strings
  k = ' '
  interleave_global = True
  interleave_all = False

  while k not in ["q"]:
    session_id = keys[keypos]
    win.erase()
    win.addstr(0, 0, "Press 'q' to quit, 'h' for help. (" + k + ") Interleave: " + ("ON" if interleave_global else "OFF"))
    win.addstr(1, 0, f"Sessions: {len(keys)} Current: " + ("Global" if session_id == "-1" else session_id))
    if interleave_all:
      current_log = {}
      for k in keys:
        current_log.update(logs[k])
    elif interleave_global and global_id in logs:
      current_log = logs[keys[keypos]] | logs[global_id]
    else:
      current_log = logs[keys[keypos]]
    lines = [x for x in current_log.keys()]
    lines.sort()
    row = 2

    for l in lines[linepos:]:
      if row + 1 >= y:
        break
      show=False
      attr=0
      if highlight and highlight in current_log[l]:
        attr=curses.A_UNDERLINE
        show=True
      elif not only_highlight:
        show=True

      if show:
        if f"({session_id})" in current_log[l] and interleave_global and use_colors:
          attr |= curses.color_pair(color)

        win.addnstr(row, 0, current_log[l], x - 1, attr)
        row += 1
      if row > MAX_LINES:
        break

    win.refresh()

    k = win.getkey()

    if k == "h":
      helps = ["→:         Next session",
               "←:         Previous session",
               "Shift + →: Go forward 100 sessions",
               "Shift + ←: Go back 100 sessions",
               "Up:        Scroll up",
               "Down:      Scroll down",
               "Page up:   Move up one page",
               "Page down: Move down one page",
               "'g':       Toggle global log interleaving",
               "'f':       Filer to sessions that match this string (incremental)",
               "'x':       Exclude sessions that match this string (incremental)",
               "'o':       Only show matching lines",
               "'r':       Reset filters",
               "'m'        Interleave output of all filtered sessions",
               "'n'        Include sessions with at least this many log lines",
               "'/':       Find session by ID",
               "'C'        Toggle color highlights for sessions",
               "'N'        Next highlight color",
               "'P'        Previous highlight color",
               "'q':       Quit the program",
               "",
               "Press any key to close the help window."]

      win.erase()
      for i in range(0, len(helps)):
        win.addstr(i, 0, helps[i])
      win.refresh()
      win.getkey()
    elif k == "KEY_LEFT":
      linepos = 0
      keypos = max(keypos - 1, 0)
    elif k == "KEY_SLEFT":
      linepos = 0
      keypos = max(keypos - 100, 0)
    elif k == "KEY_RIGHT":
      linepos = 0
      keypos = max(min(keypos + 1, len(keys) - 1), 0)
    elif k == "KEY_SRIGHT":
      linepos = 0
      keypos = max(min(keypos + 100, len(keys) - 1), 0)
    elif k == "KEY_DOWN":
      linepos = min(linepos + 1, len(current_log) - 1 - 40)
    elif k == "KEY_UP":
        linepos = max(linepos - 1, 0)
    elif k == "KEY_NPAGE":
        linepos = min(linepos + y, len(current_log) - 1 - 40)
    elif k == "KEY_PPAGE":
        linepos = max(linepos - y, 0)
    elif k == "KEY_HOME":
        linepos = 0
    elif k == "KEY_END":
        linepos = len(current_log) - 1 - 40
    elif k == "f":
      pattern = read_string(win, "Match: ")
      set_match(win, pattern)
      highlight = pattern
    elif k == "x":
      pattern = read_string(win, "Exclude: ")
      set_exclude(win, pattern)
    elif k == "o":
      only_highlight = not only_highlight
    elif k == "n":
      val = read_string(win, "Min lines: ")
      try:
        set_min_lines(win, int(val))
      except Exception as e:
        warning(win, f"Not a number ({e}): {val}")
    elif k == "r":
      set_keys([])
      highlight = ""
    elif k == "g":
      interleave_global = not interleave_global
    elif k == "m":
      interleave_all = not interleave_all
    elif k == "/":
      sessions = read_string(win, "Find sessions: ")
      set_sessions(win, [s.strip() for s in sessions.split(",")])
    elif k == "C":
      use_colors = not use_colors
    elif k == "N":
      color += 1
    elif k == "P":
      if color > 0:
        color -= 1


curses.wrapper(main)
